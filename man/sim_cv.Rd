% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sim_functions.R
\name{sim_cv}
\alias{sim_cv}
\title{sim_cv}
\usage{
sim_cv(n, g0, Q0, SL.library, SL.libraryG, method = "method.NNLS",
  cv = TRUE, single = FALSE)
}
\arguments{
\item{n, }{sample size}

\item{g0, }{treatment mechanism formula}

\item{Q0, }{outcome model formula}

\item{SL.library, }{SuperLearner library for outcome predictions}

\item{SL.libraryG, }{SuperLearner Library for treatment mechanism}

\item{cv, }{set to TRUE for CV-TMLE}

\item{single, }{always set to FALSE.}
}
\value{
a vector with the following elements in this order:
TMLE confidence intervals each with estimate, left and right bounds
one step single parameter TMLE for blip variance, the iterative one
step TMLE for blip variance, simultaneous one step TMLE (which 
estimates average treatment effect and blip variance) for blip 
variance, simultaneous iterative TMLE "line" option
(estimates average treatment effect and blip variance) for blip 
variance, simultaneous iterative TMLE "full" option
(estimates average treatment effect and blip variance) for blip 
variance. All of the same CI's just mentioned except for initial
estimate that is main terms and interactions glm excep the "line"
and "full" models. one step simultaneous TMLE (estimating average
treatment effect and blip variance) for average treatment effect,
TMLE just for Average Treatment Effect, the same as the previous
two CI's where initial estimates for the TMLE's are glm with 
main terms and interactions. initial estimate for blip variance
using SuperLearner, initial estimate for blip variance using glm 
with main terms and interactions, initial estimate for ATE using
superlearner, initial estimate for ATE using glm with main terms
and interactions, steps to convergence, logical of whether the 
algorithm converged, Outcome SuperLearner coefficients, treatment
mechanism SuperLearner coefficients, Outcome SuperLearner risk,
Propensity score SuperLearner risk
}
\description{
Function that simulates data and performs TMLE estimates
data is 4 covariates and binary treatment and outcome.  The covariates
are generated according to the gendata function.
}
\examples{
# basic example with very simple SuperLearner library
# generate the data according to a couple of built-in functions here

data = gendata(1000, g0 = g0_linear, Q0 = Q0_trig1)

#drop Y
Y = data$Y
A = data$A
#drop Y to form X and form newdata
X = data[,-6]
X0 = X1 = X
X0$A = 0
X1$A = 1
newdata = rbind(X,X1,X0)
#form W
W = X[,-1]

#declare SL library
SL.library = SL.libraryG = c("SL.glm","SL.mean")

stack = SL.stack(Y, X, A, W, newdata, method = "method.NNloglik",
                 SL.library, SL.libraryG, V=10, mc.cores = 4)

# simultaneously run one-step tmle for ATE and blip variance with 
# simultaneous CI
tmle.info = gentmle(initdata=stack$initdata, 
                    params=list(param_ATE,param_sigmaATE), 
                    submodel = submodel_logit, loss = loss_loglik,
                    approach = "recursive", max_iter = 10000, 
                    g.trunc = 1e-2,
                    simultaneous.inference = TRUE)
tmle.info$steps
# get simultaneous CIs
ci_gentmle(tmle.info)


}
